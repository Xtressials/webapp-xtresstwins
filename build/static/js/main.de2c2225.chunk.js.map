{"version":3,"sources":["components/TutorialHeader/index.js","components/TutorialHeader/TutorialHeader.js","components/Info/Info.js","content/LandingPage/LandingPage.js","content/LandingPage/index.js","content/RepoPage/RepoTable.js","content/RepoPage/RepoPage.js","content/RepoPage/index.js","App.js","serviceWorker.js","index.js"],"names":["TutorialHeader","react_default","a","createElement","UIShell","aria-label","element","Link","to","prefix","_20_default","user_avatar_20_default","app_switcher_20_default","InfoSection","props","className","concat","heading","children","InfoCard","splitHeading","phrase","splitPhrase","split","thirdWord","pop","join","createArrayFromPhrase","body","icon","selected","triggerHref","role","href","tabIndex","LandingPage","Breadcrumb","noTrailingSlash","BreadcrumbItem","Tabs","Object","assign","Tab","label","Button","src","process","alt","Info_InfoSection","Info_InfoCard","person_favorite_32_default","application_32_default","_32_default","RepoTable","_ref","rows","headers","getRowDescription","rowId","row","find","_ref2","id","description","DataTable","render","_ref3","getHeaderProps","getRowProps","getTableProps","TableContainer","title","Table","TableHead","TableRow","TableExpandHeader","map","header","TableHeader","TableBody","Fragment","key","TableExpandRow","cells","cell","TableCell","value","TableExpandedRow","colSpan","length","REPO_QUERY","gql","_templateObject","taggedTemplateLiteral","LinkList","url","homepageUrl","style","display","RepoPage","_useState","useState","_useState2","slicedToArray","totalItems","setTotalItems","_useState3","_useState4","firstRowIndex","setFirstRowIndex","_useState5","_useState6","currentPageSize","setCurrentPageSize","react_apollo_esm","query","loading","error","organization","data","DataTableSkeleton","columnCount","rowCount","message","repositories","totalCount","objectSpread","stars","stargazers","issueCount","issues","createdAt","Date","toLocaleDateString","updatedAt","links","RepoPage_LinkList","getRowItems","nodes","RepoPage_RepoTable","slice","Pagination","backwardText","forwardText","pageSize","pageSizes","itemsPerPageText","onChange","page","App","components_TutorialHeader","react_router","exact","path","component","Component","Boolean","window","location","hostname","match","client","ApolloClient","uri","authorization","REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN","ReactDOM","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de2c2225.chunk.js","sourcesContent":["import TutorialHeader from './TutorialHeader';\r\nexport default TutorialHeader;\r\n","import React from 'react';\r\nimport {\r\n  Header,\r\n  HeaderName,\r\n  HeaderNavigation,\r\n  HeaderMenuItem,\r\n  HeaderGlobalBar,\r\n  HeaderGlobalAction,\r\n  SkipToContent,\r\n} from 'carbon-components-react/lib/components/UIShell';\r\nimport Notification20 from '@carbon/icons-react/lib/notification/20';\r\nimport UserAvatar20 from '@carbon/icons-react/lib/user--avatar/20';\r\nimport AppSwitcher20 from '@carbon/icons-react/lib/app-switcher/20';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst TutorialHeader = () => (\r\n  <Header aria-label=\"Carbon Tutorial\">\r\n    <SkipToContent />\r\n    <HeaderName element={Link} to=\"/\" prefix=\"IBM\">\r\n      Carbon Tutorial\r\n    </HeaderName>\r\n    <HeaderNavigation aria-label=\"Carbon Tutorial\">\r\n      <HeaderMenuItem element={Link} to=\"/repos\">\r\n        Repositories\r\n      </HeaderMenuItem>\r\n    </HeaderNavigation>\r\n    <HeaderGlobalBar>\r\n      <HeaderGlobalAction aria-label=\"Notifications\">\r\n        <Notification20 />\r\n      </HeaderGlobalAction>\r\n      <HeaderGlobalAction aria-label=\"User Avatar\">\r\n        <UserAvatar20 />\r\n      </HeaderGlobalAction>\r\n      <HeaderGlobalAction aria-label=\"App Switcher\">\r\n        <AppSwitcher20 />\r\n      </HeaderGlobalAction>\r\n    </HeaderGlobalBar>\r\n  </Header>\r\n);\r\n\r\nexport default TutorialHeader;\r\n","import React from 'react';\r\n\r\n// Take in a phrase and separate the third word in an array\r\nfunction createArrayFromPhrase(phrase) {\r\n  const splitPhrase = phrase.split(' ');\r\n  const thirdWord = splitPhrase.pop();\r\n  return [splitPhrase.join(' '), thirdWord];\r\n}\r\n\r\nconst InfoSection = props => (\r\n  <section className={`bx--row ${props.className} info-section`}>\r\n    <div className=\"bx--col-md-8 bx--col-lg-4 bx--col-xlg-3\">\r\n      <h3 className=\"info-section__heading\">{props.heading}</h3>\r\n    </div>\r\n    {props.children}\r\n  </section>\r\n);\r\n\r\nconst InfoCard = props => {\r\n  const splitHeading = createArrayFromPhrase(props.heading);\r\n\r\n  return (\r\n    <div className=\"info-card bx--col-md-4 bx--col-lg-4 bx--col-xlg-3 bx--offset-xlg-1\">\r\n      <h4 className=\"info-card__heading\">\r\n        {`${splitHeading[0]} `}\r\n        <strong>{splitHeading[1]}</strong>\r\n      </h4>\r\n      <p className=\"info-card__body\">{props.body}</p>\r\n      {props.icon}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { InfoSection, InfoCard };\r\n","import React from 'react';\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n} from 'carbon-components-react';\r\nimport { InfoSection, InfoCard } from '../../components/Info';\r\nimport Globe32 from '@carbon/icons-react/lib/globe/32';\r\nimport PersonFavorite32 from '@carbon/icons-react/lib/person--favorite/32';\r\nimport Application32 from '@carbon/icons-react/lib/application/32';\r\n\r\nconst props = {\r\n  tabs: {\r\n    selected: 0,\r\n    triggerHref: '#',\r\n    role: 'navigation',\r\n  },\r\n  tab: {\r\n    href: '#',\r\n    role: 'presentation',\r\n    tabIndex: 0,\r\n  },\r\n};\r\n\r\nconst LandingPage = () => {\r\n  return (\r\n    <div className=\"bx--grid bx--grid--full-width landing-page\">\r\n      <div className=\"bx--row landing-page__banner\">\r\n        <div className=\"bx--col-lg-16\">\r\n          <Breadcrumb noTrailingSlash aria-label=\"Page navigation\">\r\n            <BreadcrumbItem>\r\n              <a href=\"/\">Getting started</a>\r\n            </BreadcrumbItem>\r\n          </Breadcrumb>\r\n          <h1 className=\"landing-page__heading\">\r\n            Design &amp; build with Carbon\r\n          </h1>\r\n        </div>\r\n      </div>\r\n      <div className=\"bx--row landing-page__r2\">\r\n        <div className=\"bx--col bx--no-gutter\">\r\n          <Tabs {...props.tabs} aria-label=\"Tab navigation\">\r\n            <Tab {...props.tab} label=\"About\">\r\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\r\n                <div className=\"bx--row landing-page__tab-content\">\r\n                  <div className=\"bx--col-md-4 bx--col-lg-7\">\r\n                    <h2 className=\"landing-page__subheading\">\r\n                      What is Carbon?\r\n                    </h2>\r\n                    <p className=\"landing-page__p\">\r\n                      Carbon is IBM’s open-source design system for digital\r\n                      products and experiences. With the IBM Design Language as\r\n                      its foundation, the system consists of working code,\r\n                      design tools and resources, human interface guidelines,\r\n                      and a vibrant community of contributors.\r\n                    </p>\r\n                    <Button>Learn more</Button>\r\n                  </div>\r\n                  <div className=\"bx--col-md-4 bx--offset-lg-1 bx--col-lg-8\">\r\n                    <img\r\n                      className=\"landing-page__illo\"\r\n                      src={`${process.env.PUBLIC_URL}/tab-illo.png`}\r\n                      alt=\"Carbon illustration\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Tab>\r\n            <Tab {...props.tab} label=\"Design\">\r\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\r\n                <div className=\"bx--row landing-page__tab-content\">\r\n                  <div className=\"bx--col-lg-16\">\r\n                    Rapidly build beautiful and accessible experiences. The\r\n                    Carbon kit contains all resources you need to get started.\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Tab>\r\n            <Tab {...props.tab} label=\"Develop\">\r\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\r\n                <div className=\"bx--row landing-page__tab-content\">\r\n                  <div className=\"bx--col-lg-16\">\r\n                    Carbon provides styles and components in Vanilla, React,\r\n                    Angular, and Vue for anyone building on the web.\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Tab>\r\n          </Tabs>\r\n        </div>\r\n      </div>\r\n      <InfoSection heading=\"The Principles\" className=\"landing-page__r3\">\r\n        <InfoCard\r\n          heading=\"Carbon is Open\"\r\n          body=\"It's a distributed effort, guided by the principles of the open-source movement. Carbon's users are also it's makers, and everyone is encouraged to contribute.\"\r\n          icon={<PersonFavorite32 />}\r\n        />\r\n        <InfoCard\r\n          heading=\"Carbon is Modular\"\r\n          body=\"Carbon's modularity ensures maximum flexibility in execution. It's components are designed to work seamlessly with each other, in whichever combination suits the needs of the user.\"\r\n          icon={<Application32 />}\r\n        />\r\n        <InfoCard\r\n          heading=\"Carbon is Consistent\"\r\n          body=\"Based on the comprehensive IBM Design Language, every element and component of Carbon was designed from the ground up to work elegantly together to ensure consistent, cohesive user experiences.\"\r\n          icon={<Globe32 />}\r\n        />\r\n      </InfoSection>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","import LandingPage from './LandingPage';\r\nexport default LandingPage;\r\n","import React from 'react';\r\nimport {\r\n  DataTable,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableExpandHeader,\r\n  TableHeader,\r\n  TableBody,\r\n  TableExpandRow,\r\n  TableCell,\r\n  TableExpandedRow,\r\n} from 'carbon-components-react';\r\n\r\nconst RepoTable = ({ rows, headers }) => {\r\n  const getRowDescription = rowId => {\r\n    const row = rows.find(({ id }) => id === rowId);\r\n    return row ? row.description : '';\r\n  };\r\n\r\n  return (\r\n    <DataTable\r\n      rows={rows}\r\n      headers={headers}\r\n      render={({\r\n        rows,\r\n        headers,\r\n        getHeaderProps,\r\n        getRowProps,\r\n        getTableProps,\r\n      }) => (\r\n        <TableContainer\r\n          title=\"Carbon Repositories\"\r\n          description=\"A collection of public Carbon repositories.\">\r\n          <Table {...getTableProps()}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableExpandHeader />\r\n                {headers.map(header => (\r\n                  <TableHeader {...getHeaderProps({ header })}>\r\n                    {header.header}\r\n                  </TableHeader>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows.map(row => (\r\n                <React.Fragment key={row.id}>\r\n                  <TableExpandRow {...getRowProps({ row })}>\r\n                    {row.cells.map(cell => (\r\n                      <TableCell key={cell.id}>{cell.value}</TableCell>\r\n                    ))}\r\n                  </TableExpandRow>\r\n                  <TableExpandedRow colSpan={headers.length + 1}>\r\n                    <p>{getRowDescription(row.id)}</p>\r\n                  </TableExpandedRow>\r\n                </React.Fragment>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RepoTable;\r\n","import React, { useState } from 'react';\r\nimport RepoTable from './RepoTable';\r\nimport { gql } from 'apollo-boost';\r\nimport { Query } from 'react-apollo';\r\nimport { Link, DataTableSkeleton, Pagination } from 'carbon-components-react';\r\n\r\nconst REPO_QUERY = gql`\r\n  query REPO_QUERY {\r\n    # Let's use carbon as our organization\r\n    organization(login: \"carbon-design-system\") {\r\n      # We'll grab all the repositories in one go. To load more resources\r\n      # continuously, see the advanced topics.\r\n      repositories(first: 75, orderBy: { field: UPDATED_AT, direction: DESC }) {\r\n        totalCount\r\n        nodes {\r\n          url\r\n          homepageUrl\r\n          issues(filterBy: { states: OPEN }) {\r\n            totalCount\r\n          }\r\n          stargazers {\r\n            totalCount\r\n          }\r\n          releases(first: 1) {\r\n            totalCount\r\n            nodes {\r\n              name\r\n            }\r\n          }\r\n          name\r\n          updatedAt\r\n          createdAt\r\n          description\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst headers = [\r\n  {\r\n    key: 'name',\r\n    header: 'Name',\r\n  },\r\n  {\r\n    key: 'createdAt',\r\n    header: 'Created',\r\n  },\r\n  {\r\n    key: 'updatedAt',\r\n    header: 'Updated',\r\n  },\r\n  {\r\n    key: 'issueCount',\r\n    header: 'Open Issues',\r\n  },\r\n  {\r\n    key: 'stars',\r\n    header: 'Stars',\r\n  },\r\n  {\r\n    key: 'links',\r\n    header: 'Links',\r\n  },\r\n];\r\n\r\nconst LinkList = ({ url, homepageUrl }) => (\r\n  <ul style={{ display: 'flex' }}>\r\n    <li>\r\n      <Link href={url}>GitHub</Link>\r\n    </li>\r\n    {homepageUrl && (\r\n      <li>\r\n        <span>&nbsp;|&nbsp;</span>\r\n        <Link href={homepageUrl}>Homepage</Link>\r\n      </li>\r\n    )}\r\n  </ul>\r\n);\r\n\r\nconst getRowItems = rows =>\r\n  rows.map(row => ({\r\n    ...row,\r\n    key: row.id,\r\n    stars: row.stargazers.totalCount,\r\n    issueCount: row.issues.totalCount,\r\n    createdAt: new Date(row.createdAt).toLocaleDateString(),\r\n    updatedAt: new Date(row.updatedAt).toLocaleDateString(),\r\n    links: <LinkList url={row.url} homepageUrl={row.homepageUrl} />,\r\n  }));\r\n\r\nconst RepoPage = () => {\r\n  const [totalItems, setTotalItems] = useState(0);\r\n  const [firstRowIndex, setFirstRowIndex] = useState(0);\r\n  const [currentPageSize, setCurrentPageSize] = useState(10);\r\n\r\n  return (\r\n    <div className=\"bx--grid bx--grid--full-width bx--grid--no-gutter repo-page\">\r\n      <div className=\"bx--row repo-page__r1\">\r\n        <div className=\"bx--col-lg-16\">\r\n          <Query query={REPO_QUERY}>\r\n            {({ loading, error, data: { organization } }) => {\r\n              // Wait for the request to complete\r\n              if (loading)\r\n                return (\r\n                  <DataTableSkeleton\r\n                    columnCount={headers.length + 1}\r\n                    rowCount={10}\r\n                    headers={headers}\r\n                  />\r\n                );\r\n\r\n              // Something went wrong with the data fetching\r\n              if (error) return `Error! ${error.message}`;\r\n\r\n              // If we're here, we've got our data!\r\n              const { repositories } = organization;\r\n              setTotalItems(repositories.totalCount);\r\n              const rows = getRowItems(repositories.nodes);\r\n\r\n              return (\r\n                <>\r\n                  <RepoTable\r\n                    headers={headers}\r\n                    rows={rows.slice(\r\n                      firstRowIndex,\r\n                      firstRowIndex + currentPageSize\r\n                    )}\r\n                  />\r\n                  <Pagination\r\n                    totalItems={totalItems}\r\n                    backwardText=\"Previous page\"\r\n                    forwardText=\"Next page\"\r\n                    pageSize={currentPageSize}\r\n                    pageSizes={[5, 10, 15, 25]}\r\n                    itemsPerPageText=\"Items per page\"\r\n                    onChange={({ page, pageSize }) => {\r\n                      if (pageSize !== currentPageSize) {\r\n                        setCurrentPageSize(pageSize);\r\n                      }\r\n                      setFirstRowIndex(pageSize * (page - 1));\r\n                    }}\r\n                  />\r\n                </>\r\n              );\r\n            }}\r\n          </Query>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepoPage;\r\n","import RepoPage from './RepoPage';\r\nexport default RepoPage;\r\n","import React, { Component } from 'react';\r\nimport './app.scss';\r\nimport { Content } from 'carbon-components-react/lib/components/UIShell';\r\nimport TutorialHeader from './components/TutorialHeader';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport LandingPage from './content/LandingPage';\r\nimport RepoPage from './content/RepoPage';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <TutorialHeader />\r\n        <Content>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={LandingPage} />\r\n            <Route path=\"/repos\" component={RepoPage} />\r\n          </Switch>\r\n        </Content>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'core-js/modules/es7.array.includes';\r\nimport 'core-js/modules/es6.array.fill';\r\nimport 'core-js/modules/es6.string.includes';\r\nimport 'core-js/modules/es6.string.trim';\r\nimport 'core-js/modules/es7.object.values';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { ApolloProvider } from 'react-apollo';\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'https://api.github.com/graphql',\r\n  headers: {\r\n    authorization: `Bearer ${\r\n      process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN\r\n    }`,\r\n  },\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}